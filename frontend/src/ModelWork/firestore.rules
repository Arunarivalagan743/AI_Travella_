rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // Common functions for reuse
    function isSignedIn() {
      return request.auth != null;
    }
    
    function isOwner(userId) {
      return isSignedIn() && request.auth.token.email == userId;
    }
    
    // User profiles collection
    match /users/{userId} {
      // Anyone can read user profiles
      allow read: if true;
      
      // Allow authenticated users to create profiles
      allow create: if isSignedIn();
      
      // Only the user can update or delete their own profile, 
      // or users can add/remove themselves from followers/following lists
      // or update follow requests
      allow update: if isSignedIn() && 
                     (
                       // Owner can do anything to their profile
                       request.auth.token.email == userId || 
                       
                       // Follower operations
                       (request.resource.data.followers.hasOnly(resource.data.followers.concat([request.auth.token.email])) ||
                        resource.data.followers.hasOnly(request.resource.data.followers.concat([request.auth.token.email]))) ||
                       
                       // Follow request operations - adding or removing from received requests
                       (request.resource.data.followRequestsReceived.hasOnly(resource.data.followRequestsReceived.concat([request.auth.token.email])) ||
                        resource.data.followRequestsReceived.hasOnly(request.resource.data.followRequestsReceived.concat([request.auth.token.email]))) ||
                       
                       // Allow modification of sent requests if target user is current user
                       (request.resource.data.followRequestsSent.hasOnly(resource.data.followRequestsSent.concat([request.auth.token.email])) ||
                        resource.data.followRequestsSent.hasOnly(request.resource.data.followRequestsSent.concat([request.auth.token.email])))
                     );
                     
      allow delete: if isOwner(userId);
      
      // Users collection has subcollections
      match /private/{document=**} {
        allow read, write: if isOwner(userId);
      }
    }
    
    // Trips collection
    match /alltrips/{tripId} {
      // Public trips can be read by anyone
      allow read: if resource.data.isPublic == true || 
                     (isSignedIn() && resource.data.userEmail == request.auth.token.email);
      
      // Only the creator can modify their trips
      allow create: if isSignedIn();
      allow update, delete: if isSignedIn() && resource.data.userEmail == request.auth.token.email;
    }
    
    // Likes collection
    match /likes/{likeId} {
      // Anyone can read likes
      allow read: if true;
      
      // Only authenticated users can create/update likes
      allow create, update: if isSignedIn();
      allow delete: if isSignedIn() && 
                      (resource.data.userEmail == request.auth.token.email || 
                       get(/databases/$(database)/documents/alltrips/$(resource.data.contentId)).data.userEmail == request.auth.token.email);
    }
    
    // Comments collection
    match /comments/{commentId} {
      // Anyone can read comments
      allow read: if true;
      
      // Only authenticated users can create comments
      allow create: if isSignedIn();
      
      // Only the comment owner or the content owner can delete comments
      allow update, delete: if isSignedIn() && 
                             (resource.data.userEmail == request.auth.token.email || 
                              get(/databases/$(database)/documents/alltrips/$(resource.data.tripId)).data.userEmail == request.auth.token.email);
    }
    
    // Shares collection (analytics)
    match /shares/{shareId} {
      // Anyone can read share analytics
      allow read: if true;
      
      // Only authenticated users can record shares
      allow create: if isSignedIn();
      allow update, delete: if false;
    }

    // Follower relationships
    match /followers/{followId} {
      // Follower relationships can be read by anyone
      allow read: if true;
      
      // Only authenticated users can create/modify follow relationships
      allow create, update, delete: if isSignedIn();
    }
    
    // Conversations collection for chat
    match /conversations/{conversationId} {
      // Only conversation participants can read/write to their conversations
      allow read, write: if isSignedIn() && request.auth.token.email in resource.data.participants;
      
      // Allow users to create conversations with themselves as a participant
      allow create: if isSignedIn() && request.auth.token.email in request.resource.data.participants;
      
      // Messages subcollection within conversations
      match /messages/{messageId} {
        // Only conversation participants can read/write messages
        allow read, write: if isSignedIn() && 
                           request.auth.token.email in get(/databases/$(database)/documents/conversations/$(conversationId)).data.participants;
      }
    }
    
    // Default deny
    match /{document=**} {
      allow read, write: if false;
    }
  }
}
